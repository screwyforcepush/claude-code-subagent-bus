{
  "agent_spec": {
    "name": "session-review-agent",
    "version": "1.0.0",
    "description": "AI-powered session analysis agent that reviews Claude Code session data for performance insights, deviation detection, and improvement recommendations",
    "created_by": "DianaFractal",
    "created_date": "2025-08-20",
    "
    "core_capabilities": {
      "session_data_retrieval": {
        "description": "Retrieves comprehensive session data including events, agents, messages, and metadata",
        "methods": [
          "getCurrentSessionId.sh",
          "API endpoint queries",
          "Event stream analysis"
        ]
      },
      "deviation_analysis": {
        "description": "Analyzes session behavior against expected patterns and user prompts",
        "analysis_types": [
          "User intent vs execution drift",
          "Agent coordination inefficiencies", 
          "Resource usage anomalies",
          "Error pattern recognition",
          "Timeline flow disruptions"
        ]
      },
      "performance_evaluation": {
        "description": "Evaluates session performance across multiple dimensions",
        "metrics": [
          "Task completion rate",
          "Agent efficiency scores",
          "Error handling quality",
          "Coordination effectiveness",
          "Resource optimization"
        ]
      },
      "insights_generation": {
        "description": "Generates actionable insights from session analysis",
        "insight_categories": [
          "Performance bottlenecks",
          "Coordination problems", 
          "Resource waste identification",
          "Success pattern recognition",
          "Optimization opportunities"
        ]
      },
      "recommendations_engine": {
        "description": "Provides prioritized recommendations for improvement",
        "recommendation_types": [
          "Process optimizations",
          "Agent coordination improvements",
          "Resource usage optimizations",
          "Error prevention strategies",
          "Workflow enhancements"
        ]
      }
    },

    "tools_and_apis": {
      "session_identification": {
        "tool": "Bash",
        "command": "./getCurrentSessionId.sh",
        "description": "Retrieves current session ID using AlexStorm's hook interceptor that blocks with exit(2) and returns session data via stderr",
        "output_format": "Session ID string via stderr (blocked execution)",
        "usage_pattern": "Must be called first to establish session context - agent receives blocking response from hook",
        "integration_note": "Uses AlexStorm's intercept_session_id.py hook which intercepts Bash calls to getCurrentSessionId.sh"
      },
      "comprehensive_session_data_fetch": {
        "tool": "Bash",
        "command": "python3 .claude/hooks/session-data/get_session_data.py --session-id {session_id}",
        "description": "Fetches comprehensive session data using RafaelQuantum's optimized data script with error handling and validation",
        "output_format": "Structured JSON with session_summary, performance_metrics, error_analysis, agent_coordination, and raw_data",
        "advantages": ["Built-in error handling", "Data validation", "Performance metrics calculation", "Review-optimized format"],
        "fallback_commands": {
          "raw_json": "python3 .claude/hooks/session-data/get_session_data.py --session-id {session_id} --json",
          "human_readable": "python3 .claude/hooks/session-data/get_session_data.py --session-id {session_id} --formatted"
        }
      },
      "direct_api_access": {
        "description": "Direct API calls for specific data needs when comprehensive script is insufficient",
        "session_events": {
          "tool": "Bash", 
          "command": "curl -s http://localhost:4000/events/session/{session_id}",
          "description": "Fetches all events for a specific session",
          "output_format": "JSON array of HookEvent objects"
        },
        "agent_data": {
          "tool": "Bash",
          "command": "curl -s http://localhost:4000/subagents/{session_id}",
          "description": "Retrieves all subagents data for the session",
          "output_format": "JSON array of subagent objects with metadata"
        },
        "message_data": {
          "tool": "Bash", 
          "command": "curl -s http://localhost:4000/subagents/messages",
          "description": "Retrieves all inter-agent messages for coordination analysis",
          "output_format": "JSON array of message objects"
        },
        "session_introspection": {
          "tool": "Bash",
          "command": "curl -s http://localhost:4000/api/sessions/{session_id}/introspect",
          "description": "Gets comprehensive session introspection data including message history",
          "output_format": "SessionIntrospectionResponse with timeline and context"
        }
      }
    },

    "analysis_workflow": {
      "phase_1_data_collection": {
        "steps": [
          "Execute getCurrentSessionId.sh to get session identifier (intercepted by AlexStorm's hook)",
          "Use RafaelQuantum's get_session_data.py script for comprehensive data fetch",
          "Fallback to direct API calls if script fails",
          "Validate data completeness and format"
        ],
        "primary_method": "python3 .claude/hooks/session-data/get_session_data.py --session-id {session_id}",
        "fallback_methods": [
          "Direct curl to /events/session/{session_id}",
          "Direct curl to /subagents/{session_id}",
          "Direct curl to /subagents/messages",
          "Direct curl to /api/sessions/{session_id}/introspect"
        ],
        "error_handling": "RafaelQuantum's script provides comprehensive error handling with graceful degradation",
        "timeout": "10 seconds per call (script handles internally)"
      },
      "phase_2_pattern_analysis": {
        "steps": [
          "Parse user intents from initial prompts and UserPromptSubmit events",
          "Map actual execution flow from agent timeline",
          "Identify deviations between intended vs actual behavior",
          "Analyze agent coordination patterns and communication efficiency",
          "Detect error patterns and recovery mechanisms"
        ],
        "analysis_depth": "Deep pattern recognition using event sequence analysis"
      },
      "phase_3_performance_evaluation": {
        "scoring_dimensions": {
          "task_completion": "0-100 scale based on objective achievement",
          "efficiency": "0-100 scale based on time/resource optimization",
          "error_handling": "0-100 scale based on graceful error recovery",
          "coordination": "0-100 scale based on agent communication quality",
          "resource_usage": "0-100 scale based on optimal resource utilization"
        },
        "weighting": {
          "task_completion": 0.3,
          "efficiency": 0.2,
          "error_handling": 0.2,
          "coordination": 0.15,
          "resource_usage": 0.15
        }
      },
      "phase_4_insights_generation": {
        "pattern_recognition": [
          "Identify recurring successful strategies",
          "Detect problematic patterns leading to delays or errors",
          "Recognize optimization opportunities",
          "Map cause-effect relationships in session flow"
        ],
        "context_analysis": "Consider session complexity, user requirements, and system constraints"
      },
      "phase_5_recommendations": {
        "prioritization": "High/Medium/Low based on impact and implementation effort",
        "categories": [
          "Immediate fixes for critical issues",
          "Process improvements for efficiency",
          "Strategic optimizations for long-term gains"
        ],
        "actionability": "Each recommendation must include specific, implementable actions"
      }
    },

    "output_format": {
      "structure": "JSON object with standardized fields",
      "required_fields": [
        "session_id",
        "analysis_timestamp", 
        "overall_score",
        "dimension_scores",
        "executive_summary",
        "key_insights",
        "recommendations",
        "deviation_analysis",
        "performance_metrics"
      ],
      "optional_fields": [
        "anomalies_detected",
        "success_patterns",
        "comparative_analysis",
        "trend_indicators"
      ]
    },

    "deviation_analysis_framework": {
      "intent_extraction": {
        "method": "Parse UserPromptSubmit events and initial agent prompts",
        "focus": "Identify user's stated objectives and expected outcomes"
      },
      "execution_mapping": {
        "method": "Trace actual agent actions through event timeline",
        "focus": "Document what was actually executed vs intended"
      },
      "gap_identification": {
        "types": [
          "Scope creep - executing beyond stated requirements",
          "Under-delivery - missing key user requirements",
          "Process deviation - inefficient execution paths",
          "Resource misallocation - suboptimal agent assignments"
        ]
      },
      "impact_assessment": {
        "criteria": [
          "Severity of deviation from user intent",
          "Time/resource impact of deviations",
          "Quality impact on final deliverables",
          "User experience degradation"
        ]
      }
    },

    "prompt_templates": {
      "initial_analysis": "You are analyzing Claude Code session {session_id} with the following data:\n\nSession Events: {events_summary}\nAgent Performance: {agents_summary}\nUser Intent: {user_prompts}\n\nAnalyze this session for:\n1. Adherence to user requirements\n2. Execution efficiency\n3. Error handling quality\n4. Agent coordination effectiveness\n5. Resource utilization\n\nProvide scores (0-100) and specific insights for each dimension.",
      
      "deviation_detection": "Compare the user's stated requirements with the actual execution:\n\nUser Requirements:\n{user_intent}\n\nActual Execution:\n{execution_summary}\n\nIdentify and categorize any deviations:\n1. Requirements not addressed\n2. Unnecessary work performed\n3. Inefficient approaches taken\n4. Quality compromises made\n\nFor each deviation, assess impact and recommend corrections.",
      
      "recommendations_generation": "Based on the session analysis:\n\nPerformance Issues: {issues_identified}\nSuccess Patterns: {successes_identified}\nResource Usage: {resource_analysis}\n\nGenerate prioritized recommendations:\n1. HIGH PRIORITY: Critical fixes needed immediately\n2. MEDIUM PRIORITY: Process improvements for efficiency\n3. LOW PRIORITY: Optimizations for future sessions\n\nEach recommendation must be specific and actionable."
    },

    "error_handling": {
      "data_unavailability": "Continue analysis with available data, note limitations",
      "api_failures": "Retry with exponential backoff, fallback to cached data",
      "parsing_errors": "Log errors, attempt alternative parsing methods",
      "timeout_handling": "Graceful degradation with partial analysis results"
    },

    "integration_points": {
      "team_implementations": {
        "alexstorm_hook": {
          "file": ".claude/hooks/session-data/intercept_session_id.py",
          "purpose": "Intercepts Bash calls to getCurrentSessionId.sh with exit(2) blocking",
          "integration": "Agent calls getCurrentSessionId.sh normally, receives session ID via stderr",
          "testing": "Comprehensive test suite validates blocking behavior"
        },
        "rafaelquantum_data_script": {
          "file": ".claude/hooks/session-data/get_session_data.py", 
          "purpose": "Comprehensive session data fetching with validation and formatting",
          "integration": "Agent uses as primary data source with fallback options",
          "features": ["Error handling", "Data validation", "Multiple output formats", "Performance metrics"]
        }
      },
      "hook_interception": {
        "mechanism": "AlexStorm's Bash tool interceptor with exit(2) blocking mechanism",
        "transparency": "Agent unaware of hook mechanism, uses standard bash calls",
        "implementation": "Production-ready with comprehensive testing"
      },
      "api_compatibility": {
        "primary_data_source": "RafaelQuantum's get_session_data.py script",
        "fallback_endpoints": [
          "/events/session/{session_id}",
          "/subagents/{session_id}",
          "/subagents/messages", 
          "/api/sessions/{session_id}/introspect"
        ],
        "version_compatibility": "Compatible with current API version and team implementations"
      },
      "output_storage": {
        "method": "POST to /api/sessions/review/{session_id}/results (when implemented)",
        "fallback": "Write to local file for manual processing",
        "format": "Compatible with existing observability data structures"
      }
    },

    "quality_gates": {
      "data_completeness": "Verify all required data sources accessible",
      "analysis_depth": "Ensure meaningful insights beyond surface-level metrics", 
      "recommendation_quality": "Validate recommendations are specific and actionable",
      "performance_scores": "Verify scores reflect actual session performance accurately"
    },

    "usage_instructions": {
      "invocation": "Agent can be triggered manually or automatically based on session criteria",
      "session_context": "Agent automatically detects session context via getCurrentSessionId.sh",
      "output_consumption": "Results formatted for both human review and automated processing",
      "integration": "Designed to work seamlessly with existing observability infrastructure"
    },

    "limitations": {
      "real_time_analysis": "Analysis performed post-session, not during execution",
      "subjective_assessment": "Some quality metrics may require human validation",
      "api_dependency": "Requires observability server to be running and accessible",
      "data_retention": "Limited by server's event retention policies"
    },

    "future_enhancements": {
      "real_time_monitoring": "Extend to provide in-flight session analysis",
      "predictive_insights": "Learn from historical patterns to predict issues",
      "comparative_analysis": "Compare sessions across different time periods",
      "automated_optimization": "Automatically apply recommended improvements"
    }
  }
}